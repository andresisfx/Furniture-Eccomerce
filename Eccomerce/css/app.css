html {
    box-sizing: border-box; /** Permite que el ancho y alto de los elementos se calculen incluyendo el padding y el borde ejm: width:300; padding:25 lo que hará es restarle 25px padding al total del width interior para que en total sean 300px */
    /*!ESTO ES SOLO PARA RECORDAR, YA QQUE TODO ESTO YA ESTÁ INCLUUIDO EN EL NORMALIZE.CSS*/
  
}
*,*:before*,*:after {
    box-sizing: inherit; /** Permite que todos los elementos hereden el box-sizing del html, lo que significa que todos los elementos tendrán el mismo comportamiento de cálculo de ancho y alto */
    margin: 0; /** Elimina el margen por defecto de todos los elementos */
    padding: 0; /** Elimina el padding por defecto de todos los elementos */
}

/*estilos globales*/
a {
    text-decoration: none; /** Elimina el subrayado de los enlaces */
    color: #000; /** Establece el color del texto de los enlaces */
}
img {
    max-width: 100%; /** Asegura que las imágenes no excedan el ancho de su contenedor */
    display:block; /** Hace que las imágenes se comporten como bloques, ocupando todo el ancho disponible y elimina espacios entre bloques */
    
}

.contenedor{
    max-width: 1200px; /** Establece un ancho máximo de 1200px */
    margin: 0 auto; /** Centra el contenedor horizontalmente */
    padding: 20px; /** Añade un padding de 20px alrededor del contenedor */
}

.nav-contenedor {
   
border-top: 1px solid #ccc; /** Añade un borde superior de 1px de color gris claro */
 
}

.nav-principal {
   max-width: 1200px; /** Establece un ancho máximo de 1200px */
   margin:0 auto 0 auto; /** Centra el elemento horizontalmente */
   padding:20px 0; 
   display: flex;
   justify-content: space-evenly;
   
}

.nombre-sitio{
    margin-top: 50px;
    margin-bottom: 50px;
    text-align: center;
}
.nombre-sitio span {
    color: #037bc0;
    font-weight: bold;
    
}
/*!ESPECIFICIDAD EN CSS*/
/** En CSS, los estilos con mayor especificidad tienen más prioridad. El orden va así: primero los estilos en línea (style=""), luego los selectores de ID (#id), después las clases, atributos y pseudoclases (.clase, [type], :hover), y por último los elementos (div, h1, etc.) y pseudoelementos (::before). Si hay conflicto, gana el que tenga mayor especificidad. Si están empatados, se aplica el que esté más abajo en el archivo CSS.  style id   class   etiqueta
        0    0     0         0
        .claseEjempplo div{}  = 0011 porque tiene una clase y una etiqueta  
*/

.enlace{
    text-transform: uppercase;
    font-weight: bold;
    text-decoration: none;
    color: #000000;
}
/*esta clase se aplica a las etiquetas que tienen la clase navegacion y color-rojo*/


.sobre-nosotros{
  width:300px;
  padding: 25px;
  background-color: #9e1818;
}

/*!DISPLAY*/
/**diplay inline-block permite que el elemento se comporte como un bloque pero se alinee en línea con otros elementos, permitiendo establecer dimensiones y márgenes. Es útil para elementos que necesitan ser tratados como bloques pero también alineados horizontalmente, como botones o imágenes dentro de un texto.*/ 
/** diplay inline permite que el elemento se alinee en línea con otros elementos, pero no permite establecer dimensiones ni márgenes. Es útil para elementos que deben fluir dentro del texto, como enlaces o etiquetas.*/
/** diplay block permite que el elemento ocupe todo el ancho disponible y comience en una nueva línea. Es útil para elementos que deben ser tratados como bloques independientes, como párrafos o encabezados.*/
/** nav tiene display inline por defecto, lo que significa que se alinea en línea con otros elementos y no ocupa todo el ancho disponible*/
/**la etiqueta p tiene display block por defecto, lo que significa que ocupa todo el ancho disponible y comienza en una nueva línea*/


/*TODO:background image*/
.hero{
    background-image: url("../Imagenes-Ecommerce/principal.jpg");
    height: 550px;
    background-repeat: no-repeat; /** Evita que la imagen de fondo se repita */
    background-size: cover; /** Asegura que la imagen cubra todo el contenedor */
}


/*!FLEXBOX*/
/**JUSTIFY-CONTENT row : alinea los elementos horizontalmente*/
/**JUSTIFY-CONTENT column: alinea los elementos verticalmente */
/**ALIGN-ITEMS row: alinea los elementos verticalmente */
/**ALIGN-ITEMS column: alinea los elementos horizontalmente */

/*!GRID*/
/**grid-template-columns: repeat(3, 1fr); crea 3 columnas de igual tamaño en un contenedor grid*/
/**grid-template-rows: repeat(2, 1fr); crea 2 filas de igual tamaño en un contenedor grid*/
/**grid-gap: 20px; establece un espacio de 20px entre las filas y columnas de un contenedor grid*/

/**grid-template-areas: "header header header" "main main sidebar" "footer footer footer"; define un diseño de cuadrícula con áreas nombradas, donde cada área puede ocupar varias celdas y se puede referenciar por su nombre en los elementos hijos. Esto permite una disposición más semántica y fácil de entender del diseño de la cuadrícula.*/
/**grid-template: "header header header" "main main sidebar" "footer footer footer"; define un diseño de cuadrícula con áreas nombradas, donde cada área puede ocupar varias celdas y se puede referenciar por su nombre en los elementos hijos. Esto permite una disposición más semántica y fácil de entender del diseño de la cuadrícula.*/
/**Grid-lines: Las líneas de la cuadrícula son las líneas que dividen el contenedor grid en filas y columnas. Se pueden referenciar por su número o nombre para posicionar elementos dentro del grid. Por ejemplo, grid-column: 1 / 3; posiciona un elemento desde la línea de columna 1 hasta la línea de columna 3, abarcando dos columnas.*/
/**Grid track: Una pista de cuadrícula es una fila o columna dentro del contenedor grid. Se define mediante grid-template-rows o grid-template-columns, y puede tener un tamaño fijo, flexible o automático. Por ejemplo, grid-template-columns: 100px auto; crea una columna de 100px y otra que se ajuste al contenido restante.*/
/**Grid cell: Una celda de cuadrícula es la intersección de una fila y una columna dentro del contenedor grid. Cada celda puede contener un elemento y se puede posicionar utilizando grid-row y grid-column. Por ejemplo, grid-row: 1 / 2; posiciona un elemento en la primera fila de la cuadrícula.*/
/**grid-area: header; asigna el área de la cuadrícula al elemento, permitiendo que se posicione en una ubicación específica dentro del grid*/
.categorias h2{
  text-align: center; /** Centra el texto del encabezado */
  margin-bottom: 20px; /** Añade un margen inferior de 20px */
}
.categoria a{
 text-align: center; 
 display: block; /** Agregamos esto ya que la etiqueta <a/> por defecto tiene display inline y no deja desplazarla a los lados  */
 padding: 10px;
}
.categoria a:hover{
    background-color: #037bc0; /** Cambia el color de fondo al pasar el cursor */
    color: #fff; /** Cambia el color del texto al pasar el cursor */
    padding: 10px; /** Añade un padding de 10px al pasar el cursor */
    border-bottom-right-radius: 10px; /** Añade un radio de 10px al borde inferior derecho */
}
.listado-categorias{
    display: grid; /** Utiliza grid para organizar los elementos */
    grid-template-columns: repeat(3, 2fr); /** Crea 3 columnas de igual tamaño */

    gap: 20px; /** Establece un espacio de 20px entre las columnas;  existe column-gap y row-gap pero gap aplica para las dos  */
    margin-top: 50px; /** Añade un margen superior de 50px */
}
